- entity_card = EntityCard.new(entity)
- start = Time.now

- class << Misc; def self.fingerprint(obj); puts caller; ddd obj; super(obj); end; end
- entity_card.description = entity.description

- entity_card.long_name do
  = entity.long_name

- entity_card.meta do
  %dl

    %dt Gene in Ensembl: 
    %dd
      %a(href="http://#{Misc.ensembl_server(entity.organism)}/#{Organism.scientific_name(entity.organism).sub(" ","_")}/Gene/Summary?g=#{entity.to "Ensembl Gene ID"}")= entity.to "Ensembl Gene ID"
    = fragment :entrez do
      %dt Gene in Entrez:

      %dd
        %a(href="http://www.ncbi.nlm.nih.gov/gene/#{entity.to "Entrez Gene ID"}")= entity.to "Entrez Gene ID"

  = fragment :details do 
    - gene_biotype = Organism.gene_biotype(entity.organism).tsv :persist => true
    %dl

      %dt Biotype
      %dd= gene_biotype[entity.ensembl]

      %dt Chromosome
      %dd= entity.chromosome

      %dt Chromosome Range
      %dd
        - if defined? ChromosomeRange
          = ChromosomeRange.setup([entity.chromosome, entity.chr_range.begin, entity.chr_range.end] * ":", entity.organism).link
        - else
          = [entity.chromosome, entity.chr_range.begin, entity.chr_range.end] * ":"

      %dt Strand
      %dd= entity.strand == "1" ? "Forward (Watson) Strand" : "Reverse (Crick) Strand"

      %dt Exon bases
      %dd
        - genes = entity.make_list.ensembl
        - bases = Gene.gene_list_exon_bases(entity.make_list)
        - if bases == 0
          Could not determine the exome size of this gene
        - else
          = bases

      %dt Isoforms (# aa; # PDBs)
      %dd
        - if entity.transcripts and entity.transcripts.any?
          %ul.clean_list
            - entity.transcripts.protein.compact.reject{|protein| protein.empty?}.collect{|protein| [protein, protein.pdbs || []]}.sort{|a,b| (d = a[1].length <=> b[1].length) == 0 ? (a[0].sequence || "").length <=> (b[0].sequence || "").length : d}.reverse.collect{|protein,pdbs| "#{protein.respond_to?(:link) ? protein.link : protein} (#{(protein.sequence || "").length}; #{pdbs.length})" }.each do |iso|
              %li= iso

        - else
          No transcript found for this gene

  -#= fragment do 
    - cosmic_mutations = COSMIC.knowledge_base.subset('mutation_genes', :target => [entity], :source => :all).target_entity
    - iif cosmic_mutations
    - cosmic_mutations.select_by(:relevant?)
    - protein = entity.transcripts.protein.flatten.compact.sort_by{|p| (p.sequence ||[]).length}.last if entity.proteins and entity.proteins.any?
    - protein_mutations = Annotated.flatten(cosmic_mutations.mutated_isoforms.compact).select{|mi| mi.protein == protein} if cosmic_mutations
    - iii [protein, protein_mutations]
    - if protein and protein_mutations and protein_mutations.any?
      - protein_size = protein.sequence.length
      %dl
        %dt COSMIC Mutations
        %dd 
          = cosmic_mutations.list_link :length, "COSMIC mutations (relevant) over #{entity.name || entity}"

        %dt Mutations / Protein size
        %dd= "%.3g" % (cosmic_mutations.length.to_f / protein_size)

        %dt Recurrence %
        %dd== #{"%.3g" % (hotspot * 100)} %
      -#
        %dt Hotspot statistic
        %dd
          - positions = protein_mutations.position.sort.sort 
          - distances = positions[1..-1].zip(positions).collect{|p1,p2| p1 - p2}
          - mean_mut_distance = Misc.mean distances
          - protein_size = protein.sequence.length
          - hotspot = distances.inject(0){|acc,e|  acc += 1 if e == 0; acc}.to_f / distances.length
          - unif = (0..1000).to_a.collect{ rand }
          - scaled_positions = positions.collect{|p| p.to_f / protein_size}
          -# hotspot_stat = RSRuby.instance.ks_test(scaled_positions, unif)["p.value"]
          = "%.5g" % hotspot_stat


- list_container = ListContainer.new do
  - text = entity.name || entity

  - list_container.add "GeneRIF Articles for #{text}" do 
    - entity.articles

  - kb = user_kb(user)
  - TSV.traverse kb.registry.keys, :bar => true do |database|
    - info = kb.registry[database]
    - _entity = kb.identify database, entity
    - children = kb.children(database, _entity).target_entity
    -# if not children.nil? and not children.empty? and children.respond_to? :base_type
      - list_container.add "#{database} -- #{text} ->  #{children.base_type}", children

    - if not children.nil? and not children.empty? 
      - if children.respond_to? :base_type
        - list_container.add "#{database} --  #{text} ->  #{children.base_type}", children
      - else 
        - list_container.add "#{database} --  #{text} ->  #{kb.target_type(database)}", children

    - next if kb.undirected database

    - kb.get_index(database)
    - parents = kb.parents(database, _entity).source_entity
    - if not parents.nil? and not parents.empty? 
      - if parents.respond_to? :base_type
        - list_container.add "#{database} --  #{text} ->  #{parents.base_type}", parents
      - else 
        - list_container.add "#{database} --  #{text} ->  #{kb.source_type(database)}", parents

- entity_card.list_container = list_container

- entity_card.action_controller = default_action_controller(entity)

= entity_card_render entity_card
