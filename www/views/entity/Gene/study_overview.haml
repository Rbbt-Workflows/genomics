- authorize!
- studies = user_studies[user]
- gene = entity.ensembl
- gene_name = gene.name

= action_card_render ActionCard.new do

  %h4 Genotype overview

  %p Pvalues calculated by mutations-per-base-pair frequencies

  - header "Number of samples", "NumericValue"
  - header "Average mutation count", "NumericValue"
  - header "Samples with gene mutated", "Link"
  - header "Samples with gene affected", "Link"
  - header "Samples with gene damaged", "Link"
  = table(:list_links => false, :table_id => "genotype_overview_of_#{gene}") do
    - tsv = TSV.setup({}, :key_field => "Study", :fields => ["Number of samples", "Average mutation count", "Samples with gene mutated", "Samples with gene affected", "Samples with gene damaged", "p-value"], :type => :double)

    - studies.each do |study|
      - mutation_count = study.all_mutations.length
      - next if mutation_count > 100_000
      - genotyped_samples = study.samples.select_by(:has_genotype?)
      - next if genotyped_samples.empty?
      - log study, "Processing #{ study }"


      - num_samples = genotyped_samples.length

      - row = []
      - row << genotyped_samples.length
      - row << mutation_count.to_f / genotyped_samples.length

      - mutated_samples = study.samples.annotate study.knowledge_base.subset(:sample_genes, "Sample" => genotyped_samples, "Gene" => [gene]).source_entity 

      - affected_samples = study.samples.annotate study.knowledge_base.subset(:sample_genes, "Sample" => genotyped_samples, "Gene" => [gene]).select{|match| match.info["Affected isoform"] == "true" }.source_entity

      - damaged_samples = study.samples.annotate study.knowledge_base.subset(:sample_genes, "Sample" => genotyped_samples, "Gene" => [gene]).select{|match| match.info["Damaged isoform"] == "true" }.source_entity

      - if mutated_samples.any?
        - row << mutated_samples.list_link("%.3g" % ((list_length = mutated_samples.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_name} mutated in #{ study }")
      - else
        - row << "None"
      - if affected_samples.any?
        - row << affected_samples.list_link("%.3g" % ((list_length = affected_samples.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_name} affected in #{ study }")
      - else
        - row << "None"
      - if damaged_samples.any?
        - row << damaged_samples.list_link("%.3g" % ((list_length = damaged_samples.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{gene_name} damaged in #{ study }")
      - else
        - row << "None"

      - significance = Sequence.job(:binomial_significance, study, :mutations => study.cohort.metagenotype, :threshold => 0.1).run
      - row << (significance[gene] ? significance[gene]["p.value"].to_f : 1)

      - tsv[study] = row

    - tsv
