- require 'bio-svgenes'

- entity_card = EntityCard.new entity
- name = entity.respond_to?(:name)? entity.name || entity : entity

- if not entity.respond_to?(:long_name)
  - if entity.respond_to?(:name)
    - entity_card.name = [entity.base_type, entity] * ": "
  - else
    - entity_card.name = entity.base_type
  - entity_card.long_name = name

- entity_card.meta do
  %dl
    - zoom_url = @fullpath
    - chr,start,eend = entity.split(":")
    - zoom_url.sub!(start,'START')
    - zoom_url.sub!(eend,'END')
    - start = start.to_i
    - eend = eend.to_i

    %dt Size
    %dd
      = eend - start

    %dt Zoom out
    %dd
      .ui.buttons
        %a.ui.button(href="#{zoom_url.sub("START",(start-100).to_s).sub("END", (eend+100).to_s)}") 100
        %a.ui.button(href="#{zoom_url.sub("START",(start-1000).to_s).sub("END", (eend+1000).to_s)}") 1K
        %a.ui.button(href="#{zoom_url.sub("START",(start-10_000).to_s).sub("END", (eend+10_000).to_s)}") 10K
        %a.ui.button(href="#{zoom_url.sub("START",(start-100_000).to_s).sub("END", (eend+100_000).to_s)}") 100K
        %a.ui.button(href="#{zoom_url.sub("START",(start-1_000_000).to_s).sub("END", (eend+1_000_000).to_s)}") 1MB

    %dt Zoom in
    %dd
      .ui.buttons
        %a.ui.button(href="#{zoom_url.sub("START",(start+100).to_s).sub("END", (eend-100).to_s)}") 100
        %a.ui.button(href="#{zoom_url.sub("START",(start+1000).to_s).sub("END", (eend-1000).to_s)}") 1K
        %a.ui.button(href="#{zoom_url.sub("START",(start+10_000).to_s).sub("END", (eend-10_000).to_s)}") 10K
        %a.ui.button(href="#{zoom_url.sub("START",(start+100_000).to_s).sub("END", (eend-100_000).to_s)}") 100K
        %a.ui.button(href="#{zoom_url.sub("START",(start+1_000_000).to_s).sub("END", (eend-1_000_000).to_s)}") 1MB

    %dt Shift left
    %dd
      .ui.buttons
        %a.ui.button(href="#{zoom_url.sub("START",(start-100).to_s).sub("END", (eend-100).to_s)}") 100
        %a.ui.button(href="#{zoom_url.sub("START",(start-1000).to_s).sub("END", (eend-1000).to_s)}") 1K
        %a.ui.button(href="#{zoom_url.sub("START",(start-10_000).to_s).sub("END", (eend-10_000).to_s)}") 10K
        %a.ui.button(href="#{zoom_url.sub("START",(start-100_000).to_s).sub("END", (eend-100_000).to_s)}") 100K
        %a.ui.button(href="#{zoom_url.sub("START",(start-1_000_000).to_s).sub("END", (eend-1_000_000).to_s)}") 1MB

    %dt Shift right
    %dd
      .ui.buttons
        %a.ui.button(href="#{zoom_url.sub("START",(start+100).to_s).sub("END", (eend+100).to_s)}") 100
        %a.ui.button(href="#{zoom_url.sub("START",(start+1000).to_s).sub("END", (eend+1000).to_s)}") 1K
        %a.ui.button(href="#{zoom_url.sub("START",(start+10_000).to_s).sub("END", (eend+10_000).to_s)}") 10K
        %a.ui.button(href="#{zoom_url.sub("START",(start+100_000).to_s).sub("END", (eend+100_000).to_s)}") 100K
        %a.ui.button(href="#{zoom_url.sub("START",(start+1_000_000).to_s).sub("END", (eend+1_000_000).to_s)}") 1MB

    %dt Broswer
    %dd
      %ul.clean_list
        %li
          %a(href="#{entity.ensembl_browser}") Ensembl
        %li
          %a(href="#{entity.ucsc_browser}") UCSC





- list_container = ListContainer.new
-# list_container.add "Genes for #{[entity.base_type, name] * ": "}", Gene.setup(entity.genes, "Ensembl Gene ID", entity.organism)
- list_container.add "Genes for #{[entity.base_type, name] * ": "}", entity.genes
- entity_card.list_container = list_container

- entity_card.action_controller = default_action_controller entity

- entity_card.description do
  - svg = nil
  :ruby
    p = Bio::Graphics::Page.new(:width => 800,
                                :height => 200,
                                :number_of_intervals => 10)


    gene_track = p.add_track(:glyph => :generic,
                             :name => 'Genes',
                             :label => true  )


    entity.genes.each do |gene|
      range = gene.chr_range
      gene_track.add Bio::Graphics::MiniFeature.new(:start => range.begin, :end => range.end, :strand => gene.strand,  :params => {:title => gene.name || gene, :class => "title"})
    end
    svg = p.get_markup

  :sass
    .ui.segment.chromosome_range > svg
      background-color: white
  .ui.segment.chromosome_range= svg

= entity_card_render entity_card

