- action_card = ActionCard.new 

- action_card.require :gene do
  = action_parameters do
    - self.description = "Genes can be specified in most identifier formats: ensembl, entrez, uniprot. Case is important; human gene symbols are uppercase (e.g. KRAS)."
    - input :gene, :string, "Gene ID"
    
= action_card_render action_card do
  - study = entity
  - organism = study.organism

  - gene = Gene.setup(Translation.job(:translate, gene, :genes => [gene], :organism =>organism).run.first, "Ensembl Gene ID", organism)
  - gene_name = gene.name || gene
  - list = [gene]

  -#{{{ GENOTYPE
  - if study.has_genotypes? #and study.all_mutations.length < 100_000
    %hr
    %h4 Genotype

    -# Genotype mutations
    - log :mutations
    - mutation_matches = study.knowledge_base.subset(:mutation_genes, "Genomic Mutation" => :all, "Gene" => list)
    - relevant_mutation_matches = study.knowledge_base.subset(:mutation_affected_genes, "Genomic Mutation" => :all, "Gene" => list)
    - damaging_mutation_matches = study.knowledge_base.subset(:mutation_damaged_genes, "Genomic Mutation" => :all, "Gene" => list)

    %dl.figure.float
      %span.title
        Mutation breakdown

      %dt Total number of (unique) mutations
      %dd
        - if mutation_matches.empty?
          None
        - else
          = mutation_matches.source_entity.list_link(:length, "Over #{gene_name} in #{study}")

      %dt Total number of relevant (unique) mutations
      %dd
        - if relevant_mutation_matches.empty?
          None
        - else
          = relevant_mutation_matches.source_entity.list_link(:length, "Relevant over #{gene_name} in #{study}")

    -# Genotype samples
    - log :sample_mutations
    - gene_matches = study.knowledge_base.subset(:sample_genes, "Sample" => :all, "Gene" => list)
    - relevant_gene_matches = gene_matches.select{|m| m.value["Affected Isoform"] == 'true' }
    - damaged_gene_matches = gene_matches.select{|m| m.value["Damaged Isoform"] == 'true' }

    %dl.figure.float
      %span.title
        Sample breakdown

      %dt Samples with gene mutated
      %dd
        - if gene_matches.empty?
          None
        - else
          = gene_matches.source_entity.uniq.list_link(:length, "With #{gene_name} mutated in #{study}")

      %dt Samples with gene affected
      %dd
        - if relevant_gene_matches.empty?
          None
        - else
          = relevant_gene_matches.source_entity.uniq.list_link(:length, "With #{gene_name} affected in #{study}")

      %dt Samples with gene damaged
      %dd
        - if damaged_gene_matches.empty?
          None
        - else
          = damaged_gene_matches.source_entity.uniq.list_link(:length, "With #{gene_name} damaged in #{study}")

  - data = {"Damaged" => damaged_gene_matches.source.uniq.length, 
    "Affected" => relevant_gene_matches.source.uniq.length - damaged_gene_matches.source.uniq.length, 
    "Just overlapping" => gene_matches.source.uniq.length - relevant_gene_matches.source.uniq.length,
    "Not mutated" => study.samples.length - gene_matches.source.uniq.length}

  = tool :figure, :plot => :pie, :float => true, :data => data, :title => "Samples by genotype"

