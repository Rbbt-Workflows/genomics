- authorize!
- list = list.ensembl
- studies = user_studies[user]

= action_card_render ActionCard.new do

  %h4 Genotype overview

  %p Significance calculated by mutations-per-base-pair frequencies

  - header "Number of samples", "NumericValue"
  - header "Average mutation count", "NumericValue"
  - header "Samples with gene in list mutated", "Link"
  - header "Samples with gene in list affected", "Link"
  - header "Samples with gene in list damaged", "Link"
  - header "Significant genes", "Ensembl Gene ID", :organism => list.organism
  = table(:list_links => false, :table_id => "genotype_overview_of_#{list_id}") do
    - tsv = TSV.setup({}, :key_field => "Study", :fields => ["Number of samples", "Average mutation count", "Samples with gene in list mutated", "Samples with gene in list affected", "Samples with gene in list damaged", "Significant genes"], :type => :double)

    - studies.each do |study|
      - next unless study.has_genotypes?
      - mutation_count = study.all_mutations.length
      - next if mutation_count > 100_000
      - genotyped_samples = study.samples.select_by(:has_genotype?)
      - next if genotyped_samples.empty?

      - job = NKIWorkflow.job(:significantly_mutated, study, :study => study, :threshold => 0.1)
      - significance_path = job.run(true).path
      - significance = Persist.persist_tsv significance_path, study, {}, settings.persist_options.merge(:prefix => "Significance") do |data|
        - significance = significance_path.tsv
        - significance.identifiers = Organism.identifiers(study.organism)
        - significance = significance.change_key "Ensembl Gene ID"
        - data.serializer = significance.type
        - significance.annotate data
        - data.merge! significance
        - data
        
      - num_samples = genotyped_samples.length

      - row = []
      - row << genotyped_samples.length
      - row << mutation_count.to_f / genotyped_samples.length

      - log :mutated_samples
      - mutated_samples = study.samples.annotate study.knowledge_base.subset(:sample_genes, "Sample" => genotyped_samples, "Gene" => list).source_entity 

      - log :affected_samples
      - affected_samples = study.samples.annotate study.knowledge_base.subset(:sample_genes, "Sample" => genotyped_samples, "Gene" => list).select{|match| match.info["Affected isoform"] == "true" }.source_entity

      - log :damaged_samples
      - damaged_samples = study.samples.annotate study.knowledge_base.subset(:sample_genes, "Sample" => genotyped_samples, "Gene" => list).select{|match| match.info["Damaged isoform"] == "true" }.source_entity

      - log :storing_samples
      - if mutated_samples
        - row << mutated_samples.list_link("%.3g" % ((list_length = mutated_samples.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{list_id} mutated in #{ study }")
      - else
        - row << "None"
      - if affected_samples
        - row << affected_samples.list_link("%.3g" % ((list_length = affected_samples.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{list_id} affected in #{ study }")
      - else
        - row << "None"
      - if damaged_samples
        - row << damaged_samples.list_link("%.3g" % ((list_length = damaged_samples.length).to_f * 100 / num_samples) + " % (#{list_length})", "Samples with #{list_id} damaged in #{ study }")
      - else
        - row << "None"

      - row << list.select{|gene| significance.include?(gene) and significance[gene]["p.value"].first.to_f < 0.05 }

      - tsv[study] = row

    - tsv
