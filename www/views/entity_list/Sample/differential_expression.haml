- study = list.study

- action_card = ActionCard.new do
  - if study.matrices.length > 1
    - input :matrix, :select, "Matrix to use", study.matrices.first, :select_options => study.matrices
  - else
    - input :matrix, :string, "Matrix to use", study.matrices.first, :hide => true
  - input :contrast, :select, "Background list", nil, :select_options => {'none' => 'Rest of samples', 'genotyped' => "Genotyped samples"}, :html_options => {:class => 'favourite_lists', :type => 'Sample'}
  - input :threshold, :float, "Significance threshold for (non-adjusted) p-value", 0.1

 
- action_card.require :threshold
= action_card_render action_card do
  - type = matrix
  - matrix = study.matrix(matrix)

  - case contrast
  - when nil, 'none'
    - rest = study.samples - list
  - when 'genotyped'
    - rest = study.samples.select_by(:has_genotype?) 
  - else
    - rest = Entity::List.load_list("Sample", contrast, user)

  - donor_field = nil
  - donor_field = study.sample_info.fields.select{|f| f =~ /rna_sample/}.first if donor_field.nil?
  - donor_field = study.sample_info.fields.select{|f| f =~ /specimen/}.first if donor_field.nil?
  - donor_field = study.sample_info.fields.select{|f| f =~ /donor/}.first if donor_field.nil?

  - list = study.match_samples(list, matrix.samples, donor_field)
  - rest = study.match_samples(rest, matrix.samples, donor_field) - list

  - diffs = matrix.differential(list, rest)

  - Open.open(diffs) do |stream|
    - if not TSV.parse_header(stream).fields.include? "p.values"
      - raise "The where not enough samples with gene expression data to obtain a p-value"
     

  - threshold = threshold.to_f

  =table :table_id => "Up-regulated genes" do
    - tsv = diffs.tsv :namespace => study.organism
    - tsv.key_field = "Ensembl Gene ID" unless Entity.formats.include? tsv.key_field
    - tsv.select('p.values'){|v| v = v.to_f; v > 0 and v <= threshold }

  =table :table_id => "Down-regulated genes" do
    - tsv = diffs.tsv :namespace => study.organism
    - tsv.key_field = "Ensembl Gene ID" unless Entity.formats.include? tsv.key_field
    - new = tsv.annotate({})
    - tsv.each do |k,v| new[k] = v.collect{|_v| - _v.to_f } end
    - new.select('p.values'){|v| v > 0 and v <= threshold }

-#
  - entities = nil
  = table :table_id => "Overexpressed (#{type}) in #{list_id}", :page => "1~p.values" do
    - tsv = Expression.top_up(diffs, threshold)
    - tsv.entity_options = {:organism => study.organism}
    - entities = tsv.keys
    - tsv.cast = :to_f
    - tsv

  - if entities.respond_to? :link
    %p
      Entity list:
      = entities.list_link :length, "Overexpressed (#{type}) in #{list_id}"

 
  = table :table_id => "Underexpressed (#{type}) in #{list_id}" do
    - tsv = Expression.top_down(diffs, threshold)
    - tsv.entity_options = {:organism => study.organism}
    - entities = tsv.keys
    - tsv.cast = :to_f
    - tsv

  - if entities.respond_to? :link
    %p
      Entity list:
      = entities.list_link :length, "Underexpressed (#{type}) in #{list_id}"
