
- Workflow.require_workflow "Genomes1000"
- require 'rbbt/sources/genomes1000/entity'

- if user
  - studies = respond_to?(:user_studies)? user_studies[user] || [] : []
- else
  - studies = []

- genotype_studies = studies.collect{|s| Study.setup(s)}.select{|s| s.genotyped_samples.any?}

- action_card =  ActionCard.new do
  - input :study, :select, "Study to report samples from", "all", :select_options => ["all"] + genotype_studies  

- action_card.require :study
= action_card_render action_card do
  - study = 'all' unless defined? study
  - organism = list.organism
  - watson = list.watson
  - watson = false if watson == "false"
  - list.watson = watson

  - log :genes, "Find genes for mutations"
  - genes_for_mutations = Misc.process_to_hash(list){|list| list.genes}
  - log :damage, "Find damage for mutations"
  - damage_for_mutations = Misc.process_to_hash(list){|l| l.collect{|m| m.damaging? ? "Damaging" : "Not Damaging"}}

  - mutations = list
  - log :mutated_isoforms, "Find mutated isoforms for mutations"
  - mutated_isoforms = Misc.process_to_hash(mutations){|mutations| mutations.mutated_isoforms}
  - all_mutated_isoforms = MutatedIsoform.setup(mutated_isoforms.values.compact.flatten.uniq, organism)

  - log :damage_scores, "Find damage scores of mutated isoforms"
  - damage_scores = Misc.process_to_hash(all_mutated_isoforms){|all_mutated_isoforms| all_mutated_isoforms.damage_scores}

  - header "Genes", "Ensembl Gene ID", :organism => organism, :watson => watson
  - header "Worst Consequence", "Mutated Isoform", :organism => organism
  - table_options = nil

  - tsv = TSV.setup({}, :key_field => "Genomic Mutation", :fields => ["Ref.", "SNP", "SNP CAF", "Genes", "Worst Consequence", "Type", "Relevant?", "Consequences"], :type => :double, :namespace => organism, :entity_options => {:watson => watson})
  - log :mutations, "Processing mutation info"
  -# rsindex = Genomes1000.job(:identify, nil, :mutations => list.collect{|m| m.split(":")[0..2] * ":"}).run
  - rsindex = DbSNP.job(:annotate, nil, :mutations => list.collect{|m| m.split(":")[0..2] * ":"}).run
  - fields = rsindex.fields
  - rsid_pos = 0
  - caf_pos = fields.index "CAF"


  - list.each do |mutation|
    - mis = mutated_isoforms[mutation]
    - rsvalues = rsindex[mutation.split(":")[0..2] * ":"]
    - values = []
    - values << (watson ? mutation.reference : mutation.gene_strand_reference)
    - values << (rsvalues ? rsvalues[rsid_pos] : nil)
    - values << (rsvalues ? rsvalues[caf_pos] : nil)
    - values << mutation.genes
    - values << mutation.worst_consequence
    - values << mutation.type
    - values << mutation.relevant?
    - values << ((mis.nil? or mis.empty? ) ? "" : mis.consequence.uniq.sort * ", ")
    - tsv[mutation] = values

  - tsv.entity_options = {:watson => watson, :organism => organism}
  - tsv

  - if user
    - if study and not study.to_s == 'all'
      - studies = [study]
    - else
      - studies = genotype_studies

    - mutation2samples = {}

    - incidence = {} 
    - studies.collect do |study|
      - Study.setup(study)
      - study.knowledge_base.subset("sample_mutations", :source => :all, :target => mutations).each do |item|
        - mutation = item.target
        - sample = item.source_entity.link
        - incidence[mutation] ||= []
        - incidence[mutation] << sample

    - tsv.add_field "User study samples" do |mutation, values|
      - incidence[mutation]
      
  = table :span => :long do
    - tsv
