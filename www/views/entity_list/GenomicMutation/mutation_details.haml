
- Workflow.require_workflow "Genomes1000"
- require 'rbbt/sources/genomes1000/entity'

= action_card_render ActionCard.new do
  - organism = list.organism
  - watson = list.watson
  - watson = false if watson == "false"
  - list.watson = watson

  - log :genes, "Find genes for mutations"
  - genes_for_mutations = Misc.process_to_hash(list){|list| list.genes}
  - log :damage, "Find damage for mutations"
  - damage_for_mutations = Misc.process_to_hash(list){|l| l.collect{|m| m.damaging? ? "Damaging" : "Not Damaging"}}

  - mutations = list
  - log :mutated_isoforms, "Find mutated isoforms for mutations"
  - mutated_isoforms = Misc.process_to_hash(mutations){|mutations| mutations.mutated_isoforms}
  - all_mutated_isoforms = MutatedIsoform.setup(mutated_isoforms.values.compact.flatten.uniq, organism)

  - log :damage_scores, "Find damage scores of mutated isoforms"
  - damage_scores = Misc.process_to_hash(all_mutated_isoforms){|all_mutated_isoforms| all_mutated_isoforms.damage_scores}

  - header "Genes", "Ensembl Gene ID", :organism => organism, :watson => watson
  - header "Worst Consequence", "Mutated Isoform", :organism => organism
  - table_options = nil

  - tsv = TSV.setup({}, :key_field => "Genomic Mutation", :fields => ["Ref.", "SNP", "SNP CAF", "Genes", "Worst Consequence", "Type", "Relevant?", "Consequences"], :type => :double, :namespace => organism, :entity_options => {:watson => watson})
  - log :mutations, "Processing mutation info"
  -# rsindex = Genomes1000.job(:identify, nil, :mutations => list.collect{|m| m.split(":")[0..2] * ":"}).run
  - rsindex = DbSNP.job(:annotate, nil, :mutations => list.collect{|m| m.split(":")[0..2] * ":"}).clean.run
  - fields = rsindex.fields
  - rsid_pos = 0
  - caf_pos = fields.index "CAF"


  - list.each do |mutation|
    - mis = mutated_isoforms[mutation]
    - rsvalues = rsindex[mutation.split(":")[0..2] * ":"]
    - values = []
    - values << (watson ? mutation.reference : mutation.gene_strand_reference)
    - values << (rsvalues ? rsvalues[rsid_pos] : nil)
    - values << (rsvalues ? rsvalues[caf_pos] : nil)
    - values << mutation.genes
    - values << mutation.worst_consequence
    - values << mutation.type
    - values << mutation.relevant?
    - values << ((mis.nil? or mis.empty? ) ? "" : mis.consequence.uniq.sort * ", ")
    - tsv[mutation] = values

  - tsv.entity_options = {:watson => watson, :organism => organism}
  - tsv

  - if user
    - studies = respond_to?(:user_studies)? user_studies[user] || [] : []
    - study = studies.select{|s| list_id =~ / #{s}$/}.first
    - studies = [study] if study
    - mutation2samples = {}

    - tsv.add_field "User study samples" do |mutation, values|
      - studies.collect do |study| 
        - Study.setup(study)
        - next unless study.genotyped_samples.any?
        - ind =  study.knowledge_base.get_index("sample_mutations")
        - study.knowledge_base.subset("sample_mutations", :source => :all, :target => [mutation]).source_entity.collect{|e| e.link }.flatten.compact
      
  = table table_options do
    - tsv
